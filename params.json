{"name":"Coding-challenge","tagline":"Seitenbau Coding Challenge 2013 ","body":"### Tame It - Claim It\r\nSeitenbau is present at the Google Devfest 2013 and we brought a little challenge with us. Master it and\r\nthere's a good chance you'll soon be the owner of a fancy new smart watch!\r\n\r\n### The Task\r\nYou have to write an interpreter for the **SFCPU** - The Seitenbau Fantasy CPU. You can do that in whatever programming language you prefer. Just know that we have to be able to compile and run it (Meaning Turbo Pascal 6.0 targeting MS-DOS is not an option).\\*\r\n\r\nSend in your solution via email to coding-challenge@seitenbau.com. The **DEADLINE** is 10.11.13\r\n\r\n### SFCPU Specification\r\nThe information below should suffice to write an interpreter. If there is anything missing or you have further questions don't hesitate to contact us: coding-challenge@seitenbau.com\r\n\r\n** UPDATE ** Note that the CPU is Little Endian (Thanks Tom).\r\n\r\n#### Memory And Registers\r\n+ **RAM** : 256 bytes \r\n+ **A**  : 16bit general purpose register\r\n+ **B**  : 16bit general purpose register \r\n+ **C**  : 16bit general purpose register\r\n+ **Z**  : Zero Flag (Only modified by *CMP* Instruction)\r\n+ **IP** : Instruction Pointer Register\r\n\r\nAll memory and registers are to be initialized to 0 on startup.\r\n\r\n#### Instructions\r\n\r\n|Opcode    | Arguments             | Description                                      |\r\n|----------|-----------------------|--------------------------------------------------|\r\n|**LOAD**  | *reg*, *value*        | reg <- value ; IP+=1 ; Z=0;                      |\r\n|**LOADM** | *reg*, *address*      | reg <- ram[address] ; IP+=1 ; Z=0;               |\r\n|**SETM**  | *address*, *reg*      | ram[address] <- reg ; IP+=1 ; Z=0;               |\r\n|**ADD**   | *reg1, *reg2* *reg3*  | reg1 <- reg2 + reg3 ; Z=0;                       |\r\n|**SUB**   | *reg1*, *reg2* *reg3* | reg1 <- reg2 - reg3 ; Z=0;                       | \r\n|**INC**   | *reg*                 | reg <- reg+1 ; IP+=1 ; Z=0;                      |\r\n|**DEC**   | *reg*                 | reg <- reg-1 ; IP+=1 ; Z=0;                      |\r\n|**OR**    | *reg*, *value*        | reg1 <- reg1 | value ; IP+=1 ; Z=0;              | \r\n|**XOR**   | *reg*, *value*        | reg <- reg ^ value ; IP+=1 ; Z=0;                |\r\n|**AND**   | *reg*, *value*        | reg <- reg & value ; IP+=1 ; Z=0;                |\r\n|**CMP**   | *reg*, *value*        | Z <- (reg == value) ? 1 : 0 ; IP+=1;             |\r\n|**JNE**   | *offset*              | IP <- (Z == 0) ? IP + offset : IP + 1 ; Z=0;     |\r\n|**PRINT** | *register*            | prints reg value IP+=1 ; Z=0; (no linebreak)     |\r\n|**STOP**  |                       | stop execution ; Z=0;                            |\r\n\r\n**NOTES**\r\n\r\nIf anything odd happens at runtime always trigger a STOP instruction. Running out of\r\ncode also qualifies as odd - this means your programs will implicitly always end with\r\na STOP instruction . The STOP instruction should print the following (including the\r\nleading line break):\r\n```\r\n\r\nA: <register-A>,\r\nB: <register-B>,\r\nC: <register-C>,\r\nZ: <register-Z>\r\nIP: <register-IP>\r\n```\r\n\r\n\r\n#### Example Code\r\n\r\n```\r\nLOAD A, 1\r\nSETM 0, A\r\nLOADM A,0\r\nOR A, 8\r\nPRINT A\r\nXOR A, 42\r\nPRINT A\r\nXOR A, 42\r\nPRINT A\r\nLOAD C, 10\r\nPRINT C\r\nDEC C\r\nCMP C, 0\r\nJNE -3\r\nSTOP\r\n```\r\n\r\nThe code above should print the following:\r\n```\r\n935910987654321\r\n\r\nA: 9\r\nB: 0\r\nC: 0\r\nZ: true\r\nIP: 15 \r\n```\r\n\r\n### Rules & General\r\n1. Use any programming language\r\n2. Your program should take exactly one argument (the input file) and print any output to stdout.\r\n3. Your program should exit with code 1 when parsing the input failed. Otherwise exit with 0\r\n4. We may throw wacky input at your program, so be prepared!\r\n5. Above all: have fun and be creative!\r\n\r\n\r\n\\* Do you want to be sure that we can understand, run and evaluate you code? Then write it in Javascript, Java, Groovy, Scala, C, C++ or Ruby.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}